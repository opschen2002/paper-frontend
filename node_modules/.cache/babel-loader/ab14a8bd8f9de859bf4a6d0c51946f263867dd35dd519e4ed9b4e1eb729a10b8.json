{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport { API_BASE_URL } from '@/api/config';\n\n// 创建axios实例\nconst request = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 15000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\nrequest.interceptors.request.use(config => {\n  // 直接使用config.url，因为axios会自动和baseURL组合\n  console.log('发送请求:', {\n    url: config.url,\n    // 修改这里，不要手动拼接\n    baseURL: config.baseURL,\n    // 添加这行，查看基础URL\n    fullPath: config.baseURL + config.url,\n    // 添加这行，查看完整URL\n    method: config.method,\n    data: config.data,\n    headers: config.headers // 添加这行，查看请求头\n  });\n\n  // 添加token等认证信息（如果需要的话）\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('请求配置错误:', error);\n  ElMessage.error('请求配置错误');\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nrequest.interceptors.response.use(response => {\n  console.log('收到响应:', {\n    status: response.status,\n    data: response.data,\n    headers: response.headers\n  });\n\n  // 自定义错误处理\n  if (response.data.code !== 200) {\n    ElMessage.error(response.data.message || '请求失败');\n    return Promise.reject(new Error(response.data.message || '请求失败'));\n  }\n  return response.data;\n}, error => {\n  console.error('请求错误:', {\n    config: error.config,\n    response: error.response,\n    message: error.message\n  });\n\n  // 错误提示\n  if (error.response) {\n    // 有响应但状态码不是2xx\n    switch (error.response.status) {\n      case 404:\n        ElMessage.error('请求的资源不存在');\n        break;\n      case 401:\n        ElMessage.error('未授权，请重新登录');\n        // 可以在这里处理登录过期\n        break;\n      case 403:\n        ElMessage.error('没有权限访问该资源');\n        break;\n      default:\n        ElMessage.error(`请求失败: ${error.message}`);\n    }\n  } else if (error.request) {\n    // 发出了请求但没有响应\n    ElMessage.error('服务器无响应');\n  } else {\n    // 请求配置出错\n    ElMessage.error('请求配置错误');\n  }\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","ElMessage","API_BASE_URL","request","create","baseURL","timeout","headers","interceptors","use","config","console","log","url","fullPath","method","data","token","localStorage","getItem","error","Promise","reject","response","status","code","message","Error"],"sources":["C:/Users/陈章宇/Desktop/test/分步骤完成/v7/frontend/paper-frontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport { ElMessage } from 'element-plus'\nimport { API_BASE_URL } from '@/api/config'\n\n// 创建axios实例\nconst request = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 15000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\n// 请求拦截器\nrequest.interceptors.request.use(\n  config => {\n    // 直接使用config.url，因为axios会自动和baseURL组合\n    console.log('发送请求:', {\n      url: config.url,          // 修改这里，不要手动拼接\n      baseURL: config.baseURL,  // 添加这行，查看基础URL\n      fullPath: config.baseURL + config.url, // 添加这行，查看完整URL\n      method: config.method,\n      data: config.data,\n      headers: config.headers   // 添加这行，查看请求头\n    })\n    \n    // 添加token等认证信息（如果需要的话）\n    const token = localStorage.getItem('token')\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`\n    }\n    \n    return config\n  },\n  error => {\n    console.error('请求配置错误:', error)\n    ElMessage.error('请求配置错误')\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nrequest.interceptors.response.use(\n  response => {\n    console.log('收到响应:', {\n      status: response.status,\n      data: response.data,\n      headers: response.headers\n    })\n    \n    // 自定义错误处理\n    if (response.data.code !== 200) {\n      ElMessage.error(response.data.message || '请求失败')\n      return Promise.reject(new Error(response.data.message || '请求失败'))\n    }\n    \n    return response.data\n  },\n  error => {\n    console.error('请求错误:', {\n      config: error.config,\n      response: error.response,\n      message: error.message\n    })\n    \n    // 错误提示\n    if (error.response) {\n      // 有响应但状态码不是2xx\n      switch(error.response.status) {\n        case 404:\n          ElMessage.error('请求的资源不存在')\n          break\n        case 401:\n          ElMessage.error('未授权，请重新登录')\n          // 可以在这里处理登录过期\n          break\n        case 403:\n          ElMessage.error('没有权限访问该资源')\n          break\n        default:\n          ElMessage.error(`请求失败: ${error.message}`)\n      }\n    } else if (error.request) {\n      // 发出了请求但没有响应\n      ElMessage.error('服务器无响应')\n    } else {\n      // 请求配置出错\n      ElMessage.error('请求配置错误')\n    }\n    \n    return Promise.reject(error)\n  }\n)\n\nexport default request\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}