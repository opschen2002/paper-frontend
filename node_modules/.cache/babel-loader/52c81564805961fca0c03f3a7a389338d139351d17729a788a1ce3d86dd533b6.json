{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, reactive, onMounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nimport { authApi } from '@/api';\nexport default {\n  name: 'LoginView',\n  setup() {\n    const router = useRouter();\n    const loginFormRef = ref(null);\n    const loading = ref(false);\n    const loginForm = reactive({\n      username: '',\n      password: '',\n      role: ''\n    });\n    const rules = {\n      username: [{\n        required: true,\n        message: '请输入用户名',\n        trigger: 'blur'\n      }],\n      password: [{\n        required: true,\n        message: '请输入密码',\n        trigger: 'blur'\n      }],\n      role: [{\n        required: true,\n        message: '请选择角色',\n        trigger: 'change'\n      }]\n    };\n    const testClick = () => {\n      console.log('按钮被点击');\n      console.log('表单数据:', loginForm);\n      console.log('表单引用:', loginFormRef.value);\n    };\n    const checkNetworkConnection = () => {\n      if (!navigator.onLine) {\n        ElMessage.error('网络连接已断开，请检查网络设置');\n        return false;\n      }\n      return true;\n    };\n    const handleLogin = async () => {\n      console.log('开始登录处理', new Date().toISOString());\n      if (!loginFormRef.value) {\n        console.error('表单引用不存在');\n        return;\n      }\n      try {\n        // 表单验证\n        const valid = await loginFormRef.value.validate();\n        if (!valid) {\n          console.log('表单验证失败');\n          return;\n        }\n        loading.value = true;\n        console.log('发送登录请求，数据:', {\n          username: loginForm.username,\n          password: loginForm.password,\n          role: loginForm.role\n        });\n\n        // 直接发送请求到完整的URL\n        const response = await fetch('http://192.168.203.240:8080/api/auth/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            username: loginForm.username,\n            password: loginForm.password,\n            role: loginForm.role\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const res = await response.json();\n        console.log('登录响应:', res);\n        if (res.code === 200 && res.data) {\n          // 存储用户信息\n          localStorage.setItem('user', JSON.stringify(res.data));\n          localStorage.setItem('role', loginForm.role);\n          localStorage.setItem('username', loginForm.username);\n          ElMessage.success('登录成功');\n\n          // 根据角色跳转\n          const routes = {\n            admin: '/admin',\n            teacher: '/teacher',\n            student: '/student'\n          };\n          const targetRoute = routes[loginForm.role];\n          if (targetRoute) {\n            console.log('准备跳转到:', targetRoute);\n            await router.push(targetRoute);\n          }\n        } else {\n          throw new Error(res.message || '登录失败');\n        }\n      } catch (error) {\n        console.error('登录错误:', error);\n        let errorMessage = '登录失败';\n        if (error instanceof TypeError && error.message === 'Failed to fetch') {\n          errorMessage = '无法连接到服务器，请检查网络连接';\n        } else if (error.name === 'AbortError') {\n          errorMessage = '请求已取消';\n        } else {\n          errorMessage = error.message || '登录失败，请稍后重试';\n        }\n        ElMessage.error(errorMessage);\n      } finally {\n        loading.value = false;\n      }\n    };\n    onMounted(() => {\n      console.log('组件已挂载');\n      console.log('表单引用状态:', loginFormRef.value);\n      console.log('当前网络状态:', navigator.onLine ? '在线' : '离线');\n      window.addEventListener('online', () => {\n        console.log('网络已连接');\n        ElMessage.success('网络已连接');\n      });\n      window.addEventListener('offline', () => {\n        console.log('网络已断开');\n        ElMessage.error('网络已断开，请检查网络设置');\n      });\n    });\n    return {\n      loginFormRef,\n      loginForm,\n      loading,\n      rules,\n      handleLogin\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","useRouter","ElMessage","authApi","name","setup","router","loginFormRef","loading","loginForm","username","password","role","rules","required","message","trigger","testClick","console","log","value","checkNetworkConnection","navigator","onLine","error","handleLogin","Date","toISOString","valid","validate","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","res","json","code","data","localStorage","setItem","success","routes","admin","teacher","student","targetRoute","push","errorMessage","TypeError","window","addEventListener"],"sources":["C:\\Users\\陈章宇\\Desktop\\test\\分步骤完成\\v7\\frontend\\paper-frontend\\src\\views\\login\\LoginView.vue"],"sourcesContent":["<template>\n  <!-- 模板部分保持不变 -->\n  <div class=\"login-container\">\n    <el-card class=\"login-card\">\n      <template #header>\n        <h2>体测成绩管理系统</h2>\n      </template>\n      \n      <el-form \n        :model=\"loginForm\" \n        :rules=\"rules\" \n        ref=\"loginFormRef\"\n        @submit.prevent=\"handleLogin\"\n      >\n        <el-form-item prop=\"username\">\n          <el-input \n            v-model=\"loginForm.username\" \n            placeholder=\"用户名\"\n            prefix-icon=\"User\"\n          />\n        </el-form-item>\n        \n        <el-form-item prop=\"password\">\n          <el-input \n            v-model=\"loginForm.password\" \n            type=\"password\" \n            placeholder=\"密码\"\n            prefix-icon=\"Lock\"\n            show-password\n            @keyup.enter=\"handleLogin\"\n          />\n        </el-form-item>\n\n        <el-form-item prop=\"role\">\n          <el-select \n            v-model=\"loginForm.role\" \n            placeholder=\"请选择角色\"\n            style=\"width: 100%\"\n          >\n            <el-option label=\"管理员\" value=\"admin\" />\n            <el-option label=\"教师\" value=\"teacher\" />\n            <el-option label=\"学生\" value=\"student\" />\n          </el-select>\n        </el-form-item>\n\n        <el-form-item>\n          <el-button \n            type=\"primary\" \n            :loading=\"loading\"\n            style=\"width: 100%\"\n            @click.prevent=\"handleLogin\"\n          >\n            登录\n          </el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, onMounted } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { ElMessage } from 'element-plus'\nimport { authApi } from '@/api'\n\nexport default {\n  name: 'LoginView',\n  setup() {\n    const router = useRouter()\n    const loginFormRef = ref(null)\n    const loading = ref(false)\n\n    const loginForm = reactive({\n      username: '',\n      password: '',\n      role: ''\n    })\n\n    const rules = {\n      username: [\n        { required: true, message: '请输入用户名', trigger: 'blur' }\n      ],\n      password: [\n        { required: true, message: '请输入密码', trigger: 'blur' }\n      ],\n      role: [\n        { required: true, message: '请选择角色', trigger: 'change' }\n      ]\n    }\n\n    const testClick = () => {\n      console.log('按钮被点击')\n      console.log('表单数据:', loginForm)\n      console.log('表单引用:', loginFormRef.value)\n    }\n\n    const checkNetworkConnection = () => {\n      if (!navigator.onLine) {\n        ElMessage.error('网络连接已断开，请检查网络设置')\n        return false\n      }\n      return true\n    }\n\nconst handleLogin = async () => {\n  console.log('开始登录处理', new Date().toISOString())\n  \n  if (!loginFormRef.value) {\n    console.error('表单引用不存在')\n    return\n  }\n\n  try {\n    // 表单验证\n    const valid = await loginFormRef.value.validate()\n    if (!valid) {\n      console.log('表单验证失败')\n      return\n    }\n\n    loading.value = true\n    console.log('发送登录请求，数据:', {\n      username: loginForm.username,\n      password: loginForm.password,\n      role: loginForm.role\n    })\n\n    // 直接发送请求到完整的URL\n    const response = await fetch('http://192.168.203.240:8080/api/auth/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: loginForm.username,\n        password: loginForm.password,\n        role: loginForm.role\n      })\n    })\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`)\n    }\n\n    const res = await response.json()\n    console.log('登录响应:', res)\n\n    if (res.code === 200 && res.data) {\n      // 存储用户信息\n      localStorage.setItem('user', JSON.stringify(res.data))\n      localStorage.setItem('role', loginForm.role)\n      localStorage.setItem('username', loginForm.username)\n\n      ElMessage.success('登录成功')\n\n      // 根据角色跳转\n      const routes = {\n        admin: '/admin',\n        teacher: '/teacher',\n        student: '/student'\n      }\n\n      const targetRoute = routes[loginForm.role]\n      if (targetRoute) {\n        console.log('准备跳转到:', targetRoute)\n        await router.push(targetRoute)\n      }\n    } else {\n      throw new Error(res.message || '登录失败')\n    }\n  } catch (error) {\n    console.error('登录错误:', error)\n    let errorMessage = '登录失败'\n    \n    if (error instanceof TypeError && error.message === 'Failed to fetch') {\n      errorMessage = '无法连接到服务器，请检查网络连接'\n    } else if (error.name === 'AbortError') {\n      errorMessage = '请求已取消'\n    } else {\n      errorMessage = error.message || '登录失败，请稍后重试'\n    }\n    \n    ElMessage.error(errorMessage)\n  } finally {\n    loading.value = false\n  }\n}\n\n    onMounted(() => {\n      console.log('组件已挂载')\n      console.log('表单引用状态:', loginFormRef.value)\n      console.log('当前网络状态:', navigator.onLine ? '在线' : '离线')\n\n      window.addEventListener('online', () => {\n        console.log('网络已连接')\n        ElMessage.success('网络已连接')\n      })\n\n      window.addEventListener('offline', () => {\n        console.log('网络已断开')\n        ElMessage.error('网络已断开，请检查网络设置')\n      })\n    })\n\n    return {\n      loginFormRef,\n      loginForm,\n      loading,\n      rules,\n      handleLogin\n    }\n  }\n}\n</script>\n\n<style scoped>\n.login-container {\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #f5f7fa;\n}\n\n.login-card {\n  width: 400px;\n}\n\n.el-form-item {\n  margin-bottom: 20px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}